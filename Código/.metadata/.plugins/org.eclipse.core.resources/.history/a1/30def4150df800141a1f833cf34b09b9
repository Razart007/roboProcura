package Buscas;

public class Graph {
	private Pilha pilha;
	private MatrizAdj adjMat = new MatrizAdj();
	private Celula [][] matrizAmbiente;
	int linhaMatrizAmbiente = 0, colunaMatrizAmbiente = 0;

	public Graph(Celula [][] matrizAmbiente){		
		pilha = new Pilha();
		this.matrizAmbiente = matrizAmbiente;
	}

	public void addEdge(int start, int end, int linhaStart, int colunaStart, int linhaEnd, int colunaEnd){
		adjMat.matrizAdj[start][end].ligacao = 1;
		adjMat.matrizAdj[start][end].linhaStart = linhaStart;
		adjMat.matrizAdj[start][end].colunaStart = colunaStart;
		adjMat.matrizAdj[start][end].linhaEnd= linhaEnd;
		adjMat.matrizAdj[start][end].colunaEnd = colunaEnd;
		adjMat.matrizAdj[end][start].ligacao = 1;
		adjMat.matrizAdj[end][start].linhaStart = linhaEnd;
		adjMat.matrizAdj[end][start].colunaStart = colunaEnd;
		adjMat.matrizAdj[end][start].linhaEnd = linhaStart;
		adjMat.matrizAdj[end][start].colunaEnd = colunaStart;
	}


	public void dfs()  
	{                               
		vertexList[0].wasVisited = true; 
		displayVertex(0);                
		theStack.push(0);             

		while( !theStack.isEmpty() )     
		{
			int v = getAdjUnvisitedVertex( theStack.peek() );
			if(v == -1)                 
				theStack.pop();
			else                      
			{
				vertexList[v].wasVisited = true;
				displayVertex(v);              
				theStack.push(v);        
			}
		} 

		for(int j=0; j<nVerts; j++)       
			vertexList[j].wasVisited = false;
	}

	public int getAdjUnvisitedVertex(int v)
	{
		for(int j=0; j<nVerts; j++)
			if(adjMat[v][j]==1 && vertexList[j].wasVisited==false)
				return j;
		return -1;
	} 

}
